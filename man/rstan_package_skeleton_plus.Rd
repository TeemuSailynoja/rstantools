% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rstan_package_skeleton_plus.R
\name{rstan_package_skeleton_plus}
\alias{rstan_package_skeleton_plus}
\title{Create a skeleton for a new \R package with Stan programs}
\usage{
rstan_package_skeleton_plus(name = "anRpackage", list = character(),
  environment = .GlobalEnv, path = ".", force = FALSE,
  code_files = character(), stan_files = character(), travis = TRUE,
  license = TRUE)
}
\arguments{
\item{name, list, environment, path, force, code_files}{Same as in
\code{\link[utils]{package.skeleton}}.}

\item{stan_files}{A character vector with paths to \code{.stan} files to
include in the package. Otherwise similar to \code{code_files}.}

\item{travis}{Should a \code{.travis.yml} file be added to the package
directory? Defaults to \code{TRUE}.}

\item{license}{Logical or character; whether or not to paste the contents of a \code{license.stan} file at the top of all Stan code, or path to such a file.  If \code{TRUE} adds the default \code{GPL (>= 3)} license provided by \pkg{rstantools}.}
}
\description{
This function is very similar to \code{\link[utils]{package.skeleton}} but is
designed for source packages that want to include Stan Programs that can be
built into binary versions.
}
\details{
This function first calls \code{\link[utils]{package.skeleton}}, then adds the folder infrastructure to compile and export \code{stanmodel} objects.  In the package root directory, the user's Stan source code is located in
\preformatted{
inst/
  |_stan/
  |   |_include/
  |
  |_include/
}
All \code{.stan} files containing instructions to build a \code{stanmodel} object must be placed in \code{inst/stan}.  Other \code{.stan} files go in any \code{stan/} subdirectory, to be invoked by Stan's include mechanism, e.g.,
\preformatted{
#include "include/mylib.stan"
#include "data/preprocess.stan"
}
See \pkg{\link[rstanarm]{rstanarm}} for many examples.

The folder \code{inst/include} is for all user C++ files associated with Stan program.  In this folder, the only file to directly interact with the Stan C++ library is \code{stan_meta_header.hpp}; all other \code{#include} directives must be channeled through here.

The final step of \code{rstan_package_skeleton} is to invoke \code{\link{rstan_config}}, which creates the following files for interfacing Stan objects from \R:
\itemize{
  \item \code{src} contains the \code{stan_ModelName{.cc/.hpp}} pairs associated with all \code{ModelName.stan} files in \code{inst/stan} which define \code{stanmodel} objects.
  \item \code{src/Makevars[.win]} which link to the \code{StanHeaders} and Boost (\code{BH}) libraries..
  \item \code{R/stanmodels.R} loads the C++ modules containing the \code{stanmodel} class definitions, and assigns an \R instance of each \code{stanmodel} object to a \code{stanmodels} list.
}
}
\seealso{
\itemize{
  \item After reading the guidelines for developers, if you have trouble
  setting up your package let us know on the the
  \href{http://discourse.mc-stan.org}{Stan Forums} or at
  \href{https://github.com/stan-dev/rstantools/issues}{\pkg{rstantools} issue
  tracker}.
}
}
